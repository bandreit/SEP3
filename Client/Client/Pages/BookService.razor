@page "/BookService"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager;
@using Client.Shared.Components
@using Client.Shared.Containers
@using Client.Models
@using Client.Data
@using Client.Data.Impl
@using System.Security.Claims
@using System.Text.Json
@inject IAppointmentService AppointmentService
@inject IServiceService ServiceService
@inject IBusinessService BusinessService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .bs-container {
        display:  grid;
        grid-template-columns: 1fr 3fr;
        column-gap: 2rem;
    }
    
    .bs-container .action-btns {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
        margin-left: auto;
    }
    
    .bs-container .action-btns > button:first-child {
        margin-right: 0.5rem;
    }
</style>

@if (_service == null || _business == null || _employees == null)
{
    <p>Loading</p>
}
else
{
    <div class="bs-container">
        <BookServiceSidebar CurrentStep=@BookingStep/>

        <div>
            @switch (BookingStep)
            {
                case 0:
                    <ReserveLocation Locations="@_business.Locations" OnReserve="@HandleReserveLocation"/>
                    break;
                case 1:
                    <ReserveTime Service="@_service" Appointments="@_appointments" OnReserve="@HandleReserveTime"/>
                    break;
                case 2:
                    <ReserveEmployee Employees="@_employees" OnReserve="@HandleReserveEmployee"/>
                    break;
                default:
                    <div></div>
                    break;
            }
        </div>
    </div>
}

@code {
    Appointment _appointment = new Appointment();
    List<Appointment> _appointments;
    Service _service;
    Business _business;
    List<Employee> _employees;
    
    int BookingStep = 0;

    protected override async Task OnInitializedAsync()
    {
        var Query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(Query).TryGetValue("ServiceId", out var value))
        {
            _appointment.serviceId = value;
        }
        
        if( _appointment.serviceId == null)
        {
            NavigationManager.NavigateTo("/Services");
        }

        try
        {
            _appointments = await AppointmentService.getAppointments(_appointment.serviceId);
            _service = await ServiceService.getServiceById(_appointment.serviceId);
            _business = await BusinessService.GetBusiness(_service.businessId);
            _employees = await BusinessService.GetEmpoyeesDetails(_business.Employees);
        }
        catch
        {
            NavigationManager.NavigateTo("/Services");
        }
       
    }
    

    public void HandleNext()
    {
        if (BookingStep < 3)
        {
            BookingStep += 1;
            StateHasChanged();
        }
    }

    public void HandleBack()
    {
        if (BookingStep > 0)
        {
            BookingStep -= 1;
            StateHasChanged();
        }
    }
    
    public void HandleReserveLocation(Location location)
    {
        _appointment.selectedLocation = location;
        HandleNext();
    }

    
    
    public void HandleReserveEmployee(string EmployeeId)
    {
        _appointment.selectedEmployeeId = EmployeeId;
        HandleSubmit();
    }
    
    public void HandleReserveTime(DateTime date)
    {
        _appointment.scheduledTime = date.ToString("MM/dd/yyyy h:mm tt");
        HandleNext();
    }

    public async void HandleSubmit()
    {
        try
        {
            _appointment.createdBy = "5fae6476a93d05aab46d6537"; // TODO: Change this to the actual user id
            await AppointmentService.addAppointment(_appointment);
            NavigationManager.NavigateTo("/"); 
        }
        catch
        {
               
        }
    }
}