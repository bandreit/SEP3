@page "/BookService"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager;
@using Client.Shared.Components
@using Client.Shared.Containers
@using Client.Models
@using Client.Data
@using Client.Data.Impl
@inject IAppointmentService AppointmentService

<style>
    .bs-container {
        display:  grid;
        grid-template-columns: 1fr 3fr;
        column-gap: 2rem;
    }
    
    .bs-container .action-btns {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
        margin-left: auto;
    }
    
    .bs-container .action-btns > button:first-child {
        margin-right: 0.5rem;
    }
</style>

<div class="bs-container">
    <BookServiceSidebar CurrentStep=@BookingStep/>

    <div>
        @switch (BookingStep)
        {
            case 0:
                <ReserveLocation OnReserve="@HandleReserveLocation"/>
                break;
            case 1:
                <ReserveTime Appointments="@_appointments" OnReserve="@HandleReserveTime"/>
                break;
            case 2:
                <ReserveEmployee OnReserve="@HandleReserveEmployee"/>
                break;
            case 3:
                <ReserveClient OnSubmit="@HandleSubmit"/>
                break;
            default:
                <div></div>
                break;
        }
    </div>
</div>

@code {
    List<Appointment> _appointments = new List<Appointment>();
    Appointment _appointment = new Appointment();
    int BookingStep = 0;

    protected override async Task OnInitializedAsync()
    {
        var Query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(Query).TryGetValue("ServiceId", out var value))
        {
            _appointment.serviceId = value;
        }
        
        if( _appointment.serviceId == null)
        {
            NavigationManager.NavigateTo("/Services");
        }
        
        _appointments = await AppointmentService.getAppointments(_appointment.serviceId);
    }
    

    public void HandleNext()
    {
        if (BookingStep < 3)
        {
            BookingStep += 1;
            StateHasChanged();
        }
    }

    public void HandleBack()
    {
        if (BookingStep > 0)
        {
            BookingStep -= 1;
            StateHasChanged();
        }
    }
    
    public void HandleReserveLocation(string LocationId)
    {
        _appointment.selectedLocation = LocationId;
        HandleNext();
    }

    
    
    public void HandleReserveEmployee(string EmployeeId)
    {
        _appointment.selectedEmployeeId = EmployeeId;
        HandleNext();
    }
    
    public void HandleReserveTime(DateTime date)
    {
        _appointment.scheduledTime = date.ToString("MM/dd/yyyy h:mm tt");
        HandleNext();
    }

    public async void HandleSubmit(string firstName, string lasName, string email, string phoneNumber)
    {
        try
        {
            _appointment.name = $"{firstName} {lasName}";
            _appointment.email = email;
            _appointment.phone = phoneNumber;
            
            await AppointmentService.addAppointment(_appointment);
            NavigationManager.NavigateTo("/"); 
        }
        catch
        {
               
        }
    }
}