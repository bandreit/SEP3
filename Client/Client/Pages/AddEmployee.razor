@page "/AddEmployee"
@using Client.Data.Impl
@using Client.Models
@using Client.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize(Policy = "BusinessOwner")]
@inject NavigationManager NavigationManager
@inject IBusinessService BusinessService
@inject IServiceService ServiceService
@inject AuthenticationStateProvider CustomAuthenticationStateProvider
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons


<style>
    .content-wrapper {
        width: 90%;
        margin: 0 auto;
        min-width: 85px;
    }
    .button {
    border: none;
    background: grey;
    color: #ffffff !important;
    font-weight: 100;
    padding: 5px;
    text-transform: uppercase;
    border-radius: 6px;
    display: inline-block;
    transition: all 0.3s ease 0s;
    }
    .button:hover {
    color: #404040 !important;
    font-weight: 700 !important;
    letter-spacing: 3px;
    background: none;
    -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
    -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
    transition: all 0.3s ease 0s;
    }
    
    .interest-list > ul{
    display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }
</style>

<div class="col-lg-12 content-wrapper">
    <div>
        <h2 class="font-weight-bold">Add and manage an employee to your business</h2>
        <p>Please enter details below to add or edit the employees for specific services</p>
        <hr/>
    </div>
    <div class="card px-4 pt-4 mb-4 pb-4">
        <div class="row d-flex justify-content-center mb-4">
            <div>
                <SfDropDownList TValue="string?" TItem="Service" PopupHeight="350px" PopupWidth="350px" Placeholder="Select a service" DataSource="@_services" @bind-Value="@selectedServiceId">
                    <DropDownListEvents TItem="Service" TValue="string"></DropDownListEvents>
                    <DropDownListFieldSettings Value="id" Text="title"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>

        <div class="row d-flex justify-content-center">
            <div style="width: 50%">
                <h4>Employees:</h4>
                <hr/>

                @* @bind-Value=@Values[index].Value *@
                <SfListBox CssClass="interest-list" DataSource="@_employees" TItem="Employee" TValue="string[]" @bind-Value="@Selected">
                    <ListBoxSelectionSettings ShowCheckbox="true"></ListBoxSelectionSettings>
                    <ListBoxFieldSettings Text="UserName" Value="Id"></ListBoxFieldSettings>
                </SfListBox>
            </div>
        </div>
        
        <div class="row">
            <div class="btn">
                <SfButton IsPrimary="true" @onclick="HandleSubmit">Update</SfButton>
            </div>
        </div>
        <p style="color: red">@ErrorString</p>
    </div>
</div>


@code {
    private IList<Employee> _employees = new List<Employee>();
    private IList<Service> _services = new List<Service>();
    private string businessId;
    private string selectedEmployeeId;
    private string selectedServiceId;
    private string ErrorString = "";

    public string[] Selected;
    
    protected override async Task OnInitializedAsync()
    {
        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("id", out var value))
        {
            businessId = Convert.ToString(value);
        }
        if (businessId == null)
        {
            NavigationManager.NavigateTo("/OwnedBusinesses");
            return;
        }

        var employeeData = await BusinessService.GetAllEmployees();
        for (int i = 0; i < employeeData.Count; i++)
        {
            // if (employeeData[i].serviceIdList.Count == 0)
            // {
                _employees.Add(employeeData[i]);
            // }
        }

        var serviceData = await ServiceService.GetServicesByBusinessId(businessId);
        for (int i = 0; i < serviceData.Count; i++)
        {
            _services.Add(serviceData[i]);
        }
    }
    
    public async void HandleSubmit()
    {
        if (selectedServiceId == null || Selected.Length == 0 || Selected == null)
        {
            ErrorString = "Please select a service and the employees that can provide it";
            return;
        }
        try
        {
            await BusinessService.AddEmployee(Selected.ToList(), businessId, selectedServiceId);
            NavigationManager.NavigateTo($"/OwnedBusinesses");
            ErrorString = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}