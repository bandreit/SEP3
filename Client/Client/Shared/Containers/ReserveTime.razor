@using Syncfusion.Blazor.Calendars
@using Client.Models

<style>
    .datepicker-control {}
    
    .availability-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        column-gap: 2rem;
        row-gap: 2rem;
        padding: 1rem;
        background-color: #FFF;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }
    
    .availability-container .time {
        border: 1px solid #CCC;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        text-align: center;
        cursor: pointer;
    }
    
    .availability-container .time:hover {
        border-color: #0366d6;
    }
    
    .availability-container .disabled {
        cursor: not-allowed;
        background-color: #f2f4f6;
    }
</style>

<div class="datepicker-control">
    <SfDatePicker TValue="DateTime?" Value='@AppointmentDate'  ValueChange="HandleChangeDatePicker"></SfDatePicker>
</div>

<div class="availability-container">
    @foreach (AppointmentDate appointmentDate in schedule)
    {
        <div class="time @(!appointmentDate.IsAvailable ? "disabled" : "")" @onclick="@(() => HandleSelectAvailableTime(appointmentDate))">
            <span>@appointmentDate.Date.ToString("HH:mm")</span>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<Appointment> Appointments { get; set; }
    
    [Parameter]
    public Action<DateTime> OnReserve { get; set; }
    
    public DateTime AppointmentDate { get; set; } = DateTime.Now;
    public List<AppointmentDate> schedule { get; set; } = new List<AppointmentDate>();

    protected override void OnInitialized()
    {
        schedule = PopulateAvailableTime();
    }

    
    public List<AppointmentDate> PopulateAvailableTime()
    {
        List<AppointmentDate> availableTime = new List<AppointmentDate>();

        // // initiate the list
        DateTime initialDateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0);
        availableTime.Add(new AppointmentDate()
        {
            Date = initialDateTime,
            IsAvailable = isAppointmentAvailable(initialDateTime)
        });
        
        Console.WriteLine("!!!!!!!!!!!!!!!!!!!!!!!");
        // populate schedule
        for (int i = 1; i < 15; i++)
        {
            DateTime currentDateTime = availableTime[i - 1].Date;
            int prevHour = currentDateTime.Hour;
            int prevMinutes = currentDateTime.Minute;
        
            int nextHour = prevMinutes == 0 ? prevHour : prevHour + 1;
            int nextMinutes = prevMinutes == 0 ? 30 : 0;

            DateTime appointmentTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, nextHour, nextMinutes, 0);
            
            availableTime.Add(new AppointmentDate()
            {
                Date = appointmentTime,
                IsAvailable = isAppointmentAvailable(appointmentTime)
            });
        }
        
        return availableTime;
    }

    private  bool isAppointmentAvailable(DateTime time)
    {
        string formatedTime = time.ToString("MM/dd/yyyy h:mm tt");
        
        return !Appointments.Exists(x =>
        {
            Console.WriteLine(x.scheduledTime);
            Console.WriteLine(formatedTime);
            Console.WriteLine("======");
            return x.scheduledTime == formatedTime;
        });
    }

    public void HandleChangeDatePicker(ChangedEventArgs<DateTime?> args)
    {
        if (args.Value == null)
        {
            return;
        }

        DateTime date = args.Value.Value;
        AppointmentDate = new DateTime(date.Year, date.Month, date.Day, AppointmentDate.Hour, AppointmentDate.Minute, AppointmentDate.Second);
    }

    public void HandleSelectAvailableTime(AppointmentDate availableTime)
    {
        if (availableTime.IsAvailable)
        {
            AppointmentDate = new DateTime(AppointmentDate.Year, AppointmentDate.Month, AppointmentDate.Day,availableTime.Date.Hour, availableTime.Date.Minute, availableTime.Date.Second);
            OnReserve(AppointmentDate);
        }
    }

}