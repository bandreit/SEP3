@using Syncfusion.Blazor.Calendars

<style>
    .datepicker-control {}
    
    .availability-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        column-gap: 2rem;
        row-gap: 2rem;
        padding: 1rem;
        background-color: #FFF;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }
    
    .availability-container .time {
        border: 1px solid #CCC;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        text-align: center;
        cursor: pointer;
    }
    
    .availability-container .time:hover {
        border-color: #0366d6;
    }
</style>

<div class="datepicker-control">
    <SfDatePicker TValue="DateTime?" Value='@DateValue'  ValueChange="HandleChangeDatePicker"></SfDatePicker>
</div>

<div class="availability-container">
    @foreach (DateTime availableTime in availableTimes)
    {
        <div class="time" @onclick="@(() => HandleSelectAvailableTime(availableTime))">
            <span>@availableTime.ToString("HH:mm")</span>
        </div>
    }
</div>

@code {
    public List<DateTime> availableTimes = PopulateAvailableTime();

    [Parameter]
    public Action<DateTime?, DateTime?> OnReserve { get; set; }

    public DateTime? DateValue { get; set; } = DateTime.Now;

    public static List<DateTime> PopulateAvailableTime()
    {
        List<DateTime> availableTime = new List<DateTime>();

        // initiate the list
        availableTime.Add(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0));

        for (int i = 1; i < 15; i++)
        {
            int prevHour = availableTime[i - 1].Hour;
            int prevMinutes = availableTime[i - 1].Minute;

            int nextHour = prevMinutes == 0 ? prevHour : prevHour + 1;
            int nextMinutes = prevMinutes == 0 ? 30 : 0;

            availableTime.Add(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, nextHour, nextMinutes, 0));
        }

        return availableTime;
    }

    public void HandleChangeDatePicker(ChangedEventArgs<DateTime?> args)
    {
        if (args.Value == null)
        {
            return;
        }

        DateValue = args.Value;
    }

    public void HandleSelectAvailableTime(DateTime availableTime)
    {
        OnReserve(DateValue, availableTime);
    }

}